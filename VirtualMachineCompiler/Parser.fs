// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"
 

open Syntax


# 12 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | MALLOC
  | AMPERSAND
  | ASTERISK
  | RIGHTARROW
  | FREE
  | RETURN
  | VOID
  | EOF
  | WHILE
  | FOR
  | SWITCH
  | CASE
  | DEFAULT
  | COLON
  | STRUCT
  | BREAK
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | LEQ
  | GEQ
  | LT
  | GT
  | GETS
  | SEMICOLON
  | IF
  | ELSE
  | EQ
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LSQUAREBRACK
  | RSQUAREBRACK
  | TYPEINT
  | INT of (int)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_MALLOC
    | TOKEN_AMPERSAND
    | TOKEN_ASTERISK
    | TOKEN_RIGHTARROW
    | TOKEN_FREE
    | TOKEN_RETURN
    | TOKEN_VOID
    | TOKEN_EOF
    | TOKEN_WHILE
    | TOKEN_FOR
    | TOKEN_SWITCH
    | TOKEN_CASE
    | TOKEN_DEFAULT
    | TOKEN_COLON
    | TOKEN_STRUCT
    | TOKEN_BREAK
    | TOKEN_COMMA
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_GETS
    | TOKEN_SEMICOLON
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_EQ
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_LSQUAREBRACK
    | TOKEN_RSQUAREBRACK
    | TOKEN_TYPEINT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstat
    | NONTERM__startexpr
    | NONTERM_expr
    | NONTERM_Expr
    | NONTERM_ArgList
    | NONTERM_SwitchCase
    | NONTERM_DefaultSwitchCase
    | NONTERM_SwitchCases
    | NONTERM_stat
    | NONTERM_Stat
    | NONTERM_Type
    | NONTERM_VarDecl
    | NONTERM_VarDeclList
    | NONTERM_Param
    | NONTERM_ParamList
    | NONTERM_FunDecl
    | NONTERM_FunDeclList
    | NONTERM_Prog

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | MALLOC  -> 0 
  | AMPERSAND  -> 1 
  | ASTERISK  -> 2 
  | RIGHTARROW  -> 3 
  | FREE  -> 4 
  | RETURN  -> 5 
  | VOID  -> 6 
  | EOF  -> 7 
  | WHILE  -> 8 
  | FOR  -> 9 
  | SWITCH  -> 10 
  | CASE  -> 11 
  | DEFAULT  -> 12 
  | COLON  -> 13 
  | STRUCT  -> 14 
  | BREAK  -> 15 
  | COMMA  -> 16 
  | PLUS  -> 17 
  | MINUS  -> 18 
  | TIMES  -> 19 
  | LEQ  -> 20 
  | GEQ  -> 21 
  | LT  -> 22 
  | GT  -> 23 
  | GETS  -> 24 
  | SEMICOLON  -> 25 
  | IF  -> 26 
  | ELSE  -> 27 
  | EQ  -> 28 
  | LPAREN  -> 29 
  | RPAREN  -> 30 
  | LBRACK  -> 31 
  | RBRACK  -> 32 
  | LSQUAREBRACK  -> 33 
  | RSQUAREBRACK  -> 34 
  | TYPEINT  -> 35 
  | INT _ -> 36 
  | ID _ -> 37 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_MALLOC 
  | 1 -> TOKEN_AMPERSAND 
  | 2 -> TOKEN_ASTERISK 
  | 3 -> TOKEN_RIGHTARROW 
  | 4 -> TOKEN_FREE 
  | 5 -> TOKEN_RETURN 
  | 6 -> TOKEN_VOID 
  | 7 -> TOKEN_EOF 
  | 8 -> TOKEN_WHILE 
  | 9 -> TOKEN_FOR 
  | 10 -> TOKEN_SWITCH 
  | 11 -> TOKEN_CASE 
  | 12 -> TOKEN_DEFAULT 
  | 13 -> TOKEN_COLON 
  | 14 -> TOKEN_STRUCT 
  | 15 -> TOKEN_BREAK 
  | 16 -> TOKEN_COMMA 
  | 17 -> TOKEN_PLUS 
  | 18 -> TOKEN_MINUS 
  | 19 -> TOKEN_TIMES 
  | 20 -> TOKEN_LEQ 
  | 21 -> TOKEN_GEQ 
  | 22 -> TOKEN_LT 
  | 23 -> TOKEN_GT 
  | 24 -> TOKEN_GETS 
  | 25 -> TOKEN_SEMICOLON 
  | 26 -> TOKEN_IF 
  | 27 -> TOKEN_ELSE 
  | 28 -> TOKEN_EQ 
  | 29 -> TOKEN_LPAREN 
  | 30 -> TOKEN_RPAREN 
  | 31 -> TOKEN_LBRACK 
  | 32 -> TOKEN_RBRACK 
  | 33 -> TOKEN_LSQUAREBRACK 
  | 34 -> TOKEN_RSQUAREBRACK 
  | 35 -> TOKEN_TYPEINT 
  | 36 -> TOKEN_INT 
  | 37 -> TOKEN_ID 
  | 40 -> TOKEN_end_of_input
  | 38 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstat 
    | 1 -> NONTERM__startexpr 
    | 2 -> NONTERM_expr 
    | 3 -> NONTERM_Expr 
    | 4 -> NONTERM_Expr 
    | 5 -> NONTERM_Expr 
    | 6 -> NONTERM_Expr 
    | 7 -> NONTERM_Expr 
    | 8 -> NONTERM_Expr 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_ArgList 
    | 17 -> NONTERM_ArgList 
    | 18 -> NONTERM_SwitchCase 
    | 19 -> NONTERM_DefaultSwitchCase 
    | 20 -> NONTERM_SwitchCases 
    | 21 -> NONTERM_stat 
    | 22 -> NONTERM_Stat 
    | 23 -> NONTERM_Stat 
    | 24 -> NONTERM_Stat 
    | 25 -> NONTERM_Stat 
    | 26 -> NONTERM_Stat 
    | 27 -> NONTERM_Stat 
    | 28 -> NONTERM_Stat 
    | 29 -> NONTERM_Stat 
    | 30 -> NONTERM_Type 
    | 31 -> NONTERM_Type 
    | 32 -> NONTERM_Type 
    | 33 -> NONTERM_VarDecl 
    | 34 -> NONTERM_VarDecl 
    | 35 -> NONTERM_VarDecl 
    | 36 -> NONTERM_VarDeclList 
    | 37 -> NONTERM_VarDeclList 
    | 38 -> NONTERM_Param 
    | 39 -> NONTERM_ParamList 
    | 40 -> NONTERM_ParamList 
    | 41 -> NONTERM_FunDecl 
    | 42 -> NONTERM_FunDeclList 
    | 43 -> NONTERM_FunDeclList 
    | 44 -> NONTERM_Prog 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 40 
let _fsyacc_tagOfErrorTerminal = 38

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | MALLOC  -> "MALLOC" 
  | AMPERSAND  -> "AMPERSAND" 
  | ASTERISK  -> "ASTERISK" 
  | RIGHTARROW  -> "RIGHTARROW" 
  | FREE  -> "FREE" 
  | RETURN  -> "RETURN" 
  | VOID  -> "VOID" 
  | EOF  -> "EOF" 
  | WHILE  -> "WHILE" 
  | FOR  -> "FOR" 
  | SWITCH  -> "SWITCH" 
  | CASE  -> "CASE" 
  | DEFAULT  -> "DEFAULT" 
  | COLON  -> "COLON" 
  | STRUCT  -> "STRUCT" 
  | BREAK  -> "BREAK" 
  | COMMA  -> "COMMA" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | LEQ  -> "LEQ" 
  | GEQ  -> "GEQ" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | GETS  -> "GETS" 
  | SEMICOLON  -> "SEMICOLON" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | EQ  -> "EQ" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | LSQUAREBRACK  -> "LSQUAREBRACK" 
  | RSQUAREBRACK  -> "RSQUAREBRACK" 
  | TYPEINT  -> "TYPEINT" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | MALLOC  -> (null : System.Object) 
  | AMPERSAND  -> (null : System.Object) 
  | ASTERISK  -> (null : System.Object) 
  | RIGHTARROW  -> (null : System.Object) 
  | FREE  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | VOID  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | SWITCH  -> (null : System.Object) 
  | CASE  -> (null : System.Object) 
  | DEFAULT  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | STRUCT  -> (null : System.Object) 
  | BREAK  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | LEQ  -> (null : System.Object) 
  | GEQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GETS  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | LSQUAREBRACK  -> (null : System.Object) 
  | RSQUAREBRACK  -> (null : System.Object) 
  | TYPEINT  -> (null : System.Object) 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;0us;65535us;1us;65535us;2us;3us;24us;65535us;0us;16us;2us;4us;21us;6us;22us;7us;23us;8us;24us;9us;25us;10us;26us;11us;27us;12us;28us;13us;30us;14us;33us;15us;37us;15us;41us;16us;43us;16us;46us;16us;54us;17us;56us;16us;60us;16us;64us;18us;66us;16us;70us;19us;77us;16us;78us;20us;2us;65535us;33us;34us;37us;38us;2us;65535us;48us;48us;72us;48us;1us;65535us;73us;74us;2us;65535us;48us;49us;72us;73us;1us;65535us;0us;1us;8us;65535us;0us;50us;41us;42us;43us;76us;46us;47us;56us;57us;60us;61us;66us;67us;77us;76us;0us;65535us;0us;65535us;0us;65535us;0us;65535us;0us;65535us;0us;65535us;0us;65535us;0us;65535us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;2us;4us;29us;32us;35us;37us;40us;42us;51us;52us;53us;54us;55us;56us;57us;58us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;9us;2us;3us;4us;5us;6us;7us;8us;9us;10us;1us;2us;9us;3us;3us;4us;5us;6us;7us;8us;9us;10us;9us;3us;4us;4us;5us;6us;7us;8us;9us;10us;9us;3us;4us;5us;5us;6us;7us;8us;9us;10us;9us;3us;4us;5us;6us;6us;7us;8us;9us;10us;9us;3us;4us;5us;6us;7us;7us;8us;9us;10us;9us;3us;4us;5us;6us;7us;8us;8us;9us;10us;9us;3us;4us;5us;6us;7us;8us;9us;9us;10us;9us;3us;4us;5us;6us;7us;8us;9us;10us;10us;9us;3us;4us;5us;6us;7us;8us;9us;10us;12us;10us;3us;4us;5us;6us;7us;8us;9us;10us;16us;17us;9us;3us;4us;5us;6us;7us;8us;9us;10us;22us;10us;3us;4us;5us;6us;7us;8us;9us;10us;23us;24us;9us;3us;4us;5us;6us;7us;8us;9us;10us;25us;9us;3us;4us;5us;6us;7us;8us;9us;10us;26us;9us;3us;4us;5us;6us;7us;8us;9us;10us;28us;1us;3us;1us;4us;1us;5us;1us;6us;1us;7us;1us;8us;1us;9us;1us;10us;1us;11us;1us;12us;1us;12us;3us;13us;14us;15us;2us;14us;15us;1us;14us;1us;14us;1us;15us;1us;16us;1us;16us;1us;18us;1us;18us;1us;18us;2us;18us;27us;2us;18us;27us;1us;18us;1us;19us;1us;19us;2us;19us;27us;1us;20us;1us;20us;2us;21us;27us;1us;21us;1us;22us;2us;23us;24us;2us;23us;24us;2us;23us;24us;2us;23us;24us;3us;23us;24us;27us;2us;23us;24us;1us;24us;1us;24us;2us;24us;27us;1us;24us;1us;25us;1us;25us;1us;25us;1us;25us;2us;25us;27us;1us;25us;1us;26us;1us;26us;1us;26us;1us;26us;1us;26us;1us;26us;1us;26us;2us;27us;27us;1us;27us;2us;28us;29us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;18us;20us;30us;40us;50us;60us;70us;80us;90us;100us;110us;121us;131us;142us;152us;162us;172us;174us;176us;178us;180us;182us;184us;186us;188us;190us;192us;194us;198us;201us;203us;205us;207us;209us;211us;213us;215us;217us;220us;223us;225us;227us;229us;232us;234us;236us;239us;241us;243us;246us;249us;252us;255us;259us;262us;264us;266us;269us;271us;273us;275us;277us;279us;282us;284us;286us;288us;290us;292us;294us;296us;298us;301us;303us;|]
let _fsyacc_action_rows = 79
let _fsyacc_actionTableElements = [|7us;32768us;5us;78us;8us;63us;10us;69us;26us;53us;29us;30us;36us;29us;37us;32us;0us;49152us;3us;32768us;29us;30us;36us;29us;37us;32us;0us;49152us;9us;32768us;7us;5us;17us;21us;18us;22us;19us;23us;20us;25us;21us;26us;22us;27us;24us;28us;28us;24us;0us;16386us;5us;16387us;20us;25us;21us;26us;22us;27us;24us;28us;28us;24us;5us;16388us;20us;25us;21us;26us;22us;27us;24us;28us;28us;24us;7us;16389us;17us;21us;18us;22us;20us;25us;21us;26us;22us;27us;24us;28us;28us;24us;1us;16390us;24us;28us;1us;16391us;24us;28us;1us;16392us;24us;28us;1us;16393us;24us;28us;1us;16394us;24us;28us;9us;32768us;17us;21us;18us;22us;19us;23us;20us;25us;21us;26us;22us;27us;24us;28us;28us;24us;30us;31us;9us;16401us;16us;37us;17us;21us;18us;22us;19us;23us;20us;25us;21us;26us;22us;27us;24us;28us;28us;24us;9us;32768us;17us;21us;18us;22us;19us;23us;20us;25us;21us;26us;22us;27us;24us;28us;25us;52us;28us;24us;9us;32768us;17us;21us;18us;22us;19us;23us;20us;25us;21us;26us;22us;27us;24us;28us;28us;24us;30us;55us;9us;32768us;17us;21us;18us;22us;19us;23us;20us;25us;21us;26us;22us;27us;24us;28us;28us;24us;30us;65us;9us;32768us;17us;21us;18us;22us;19us;23us;20us;25us;21us;26us;22us;27us;24us;28us;28us;24us;30us;71us;8us;16412us;17us;21us;18us;22us;19us;23us;20us;25us;21us;26us;22us;27us;24us;28us;28us;24us;3us;32768us;29us;30us;36us;29us;37us;32us;3us;32768us;29us;30us;36us;29us;37us;32us;3us;32768us;29us;30us;36us;29us;37us;32us;3us;32768us;29us;30us;36us;29us;37us;32us;3us;32768us;29us;30us;36us;29us;37us;32us;3us;32768us;29us;30us;36us;29us;37us;32us;3us;32768us;29us;30us;36us;29us;37us;32us;3us;32768us;29us;30us;36us;29us;37us;32us;0us;16395us;3us;32768us;29us;30us;36us;29us;37us;32us;0us;16396us;1us;16397us;29us;33us;4us;32768us;29us;30us;30us;36us;36us;29us;37us;32us;1us;32768us;30us;35us;0us;16398us;0us;16399us;3us;32768us;29us;30us;36us;29us;37us;32us;0us;16400us;1us;32768us;36us;40us;1us;32768us;13us;41us;7us;32768us;5us;78us;8us;63us;10us;69us;26us;53us;29us;30us;36us;29us;37us;32us;1us;32768us;25us;43us;8us;32768us;5us;78us;8us;63us;10us;69us;15us;44us;26us;53us;29us;30us;36us;29us;37us;32us;0us;16402us;1us;32768us;13us;46us;7us;32768us;5us;78us;8us;63us;10us;69us;26us;53us;29us;30us;36us;29us;37us;32us;1us;16403us;25us;77us;1us;32768us;11us;39us;0us;16404us;2us;32768us;7us;51us;25us;77us;0us;16405us;0us;16406us;1us;32768us;29us;54us;3us;32768us;29us;30us;36us;29us;37us;32us;1us;32768us;31us;56us;7us;32768us;5us;78us;8us;63us;10us;69us;26us;53us;29us;30us;36us;29us;37us;32us;2us;32768us;25us;77us;32us;58us;1us;16407us;27us;59us;1us;32768us;31us;60us;7us;32768us;5us;78us;8us;63us;10us;69us;26us;53us;29us;30us;36us;29us;37us;32us;2us;32768us;25us;77us;32us;62us;0us;16408us;1us;32768us;29us;64us;3us;32768us;29us;30us;36us;29us;37us;32us;1us;32768us;31us;66us;7us;32768us;5us;78us;8us;63us;10us;69us;26us;53us;29us;30us;36us;29us;37us;32us;2us;32768us;25us;77us;32us;68us;0us;16409us;1us;32768us;29us;70us;3us;32768us;29us;30us;36us;29us;37us;32us;1us;32768us;31us;72us;1us;32768us;11us;39us;1us;32768us;12us;45us;1us;32768us;32us;75us;0us;16410us;0us;16411us;7us;32768us;5us;78us;8us;63us;10us;69us;26us;53us;29us;30us;36us;29us;37us;32us;3us;16413us;29us;30us;36us;29us;37us;32us;|]
let _fsyacc_actionTableRowOffsets = [|0us;8us;9us;13us;14us;24us;25us;31us;37us;45us;47us;49us;51us;53us;55us;65us;75us;85us;95us;105us;115us;124us;128us;132us;136us;140us;144us;148us;152us;156us;157us;161us;162us;164us;169us;171us;172us;173us;177us;178us;180us;182us;190us;192us;201us;202us;204us;212us;214us;216us;217us;220us;221us;222us;224us;228us;230us;238us;241us;243us;245us;253us;256us;257us;259us;263us;265us;273us;276us;277us;279us;283us;285us;287us;289us;291us;292us;293us;301us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;2us;3us;3us;3us;3us;3us;3us;3us;3us;1us;3us;1us;4us;3us;3us;1us;6us;3us;2us;2us;2us;7us;11us;7us;8us;3us;2us;1us;1us;2us;4us;3us;6us;4us;2us;1us;3us;3us;1us;9us;2us;1us;2us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;4us;4us;5us;6us;7us;8us;9us;9us;9us;9us;9us;9us;9us;9us;10us;10us;10us;11us;11us;11us;12us;12us;13us;14us;14us;15us;16us;16us;17us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;49152us;65535us;16386us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16395us;65535us;16396us;65535us;65535us;65535us;16398us;16399us;65535us;16400us;65535us;65535us;65535us;65535us;65535us;16402us;65535us;65535us;65535us;65535us;16404us;65535us;16405us;16406us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16408us;65535us;65535us;65535us;65535us;65535us;16409us;65535us;65535us;65535us;65535us;65535us;65535us;16410us;65535us;65535us;65535us;|]
let _fsyacc_reductions = lazy [|
# 350 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Stat in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstat));
# 359 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startexpr));
# 368 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                       _1 
                   )
# 32 "Parser.fsy"
                 : Expr));
# 379 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                                          Plus(_1, _3, parseState.ResultRange) 
                   )
# 33 "Parser.fsy"
                 : 'gentype_Expr));
# 391 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                                          Minus(_1, _3, parseState.ResultRange) 
                   )
# 34 "Parser.fsy"
                 : 'gentype_Expr));
# 403 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                                          Times(_1, _3, parseState.ResultRange) 
                   )
# 35 "Parser.fsy"
                 : 'gentype_Expr));
# 415 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                                          Eq(_1, _3, parseState.ResultRange) 
                   )
# 36 "Parser.fsy"
                 : 'gentype_Expr));
# 427 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                                          Leq(_1, _3, parseState.ResultRange) 
                   )
# 37 "Parser.fsy"
                 : 'gentype_Expr));
# 439 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                                          Geq(_1, _3, parseState.ResultRange) 
                   )
# 38 "Parser.fsy"
                 : 'gentype_Expr));
# 451 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                                          Lt(_1, _3, parseState.ResultRange) 
                   )
# 39 "Parser.fsy"
                 : 'gentype_Expr));
# 463 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                                          Assign(_1, _3, parseState.ResultRange) 
                   )
# 40 "Parser.fsy"
                 : 'gentype_Expr));
# 475 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                  IntLiteral(_1, parseState.ResultRange) 
                   )
# 41 "Parser.fsy"
                 : 'gentype_Expr));
# 486 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                                 _2 
                   )
# 42 "Parser.fsy"
                 : 'gentype_Expr));
# 497 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                 Var(_1, parseState.ResultRange) 
                   )
# 43 "Parser.fsy"
                 : 'gentype_Expr));
# 508 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_ArgList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                                       FunCall(_1, _3, parseState.ResultRange) 
                   )
# 44 "Parser.fsy"
                 : 'gentype_Expr));
# 520 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                               FunCall(_1, [], parseState.ResultRange) 
                   )
# 45 "Parser.fsy"
                 : 'gentype_Expr));
# 531 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_ArgList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                    _1 :: _3 
                   )
# 47 "Parser.fsy"
                 : 'gentype_ArgList));
# 543 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                    [_1] 
                   )
# 48 "Parser.fsy"
                 : 'gentype_ArgList));
# 554 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> int in
            let _4 = parseState.GetInput(4) :?> 'gentype_Stat in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                                        { scrutineeValue = _2 ; statement = _4 } 
                   )
# 50 "Parser.fsy"
                 : 'gentype_SwitchCase));
# 566 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Stat in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                              _3 
                   )
# 52 "Parser.fsy"
                 : 'gentype_DefaultSwitchCase));
# 577 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_SwitchCase in
            let _2 = parseState.GetInput(2) :?> 'gentype_SwitchCases in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                            _1 :: _2 
                   )
# 54 "Parser.fsy"
                 : 'gentype_SwitchCases));
# 589 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Stat in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                       _1 
                   )
# 56 "Parser.fsy"
                 : Stat));
# 600 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                             ExprStat(_1, parseState.ResultRange) 
                   )
# 57 "Parser.fsy"
                 : 'gentype_Stat));
# 611 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _6 = parseState.GetInput(6) :?> 'gentype_Stat in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                                       IfThen(_3, _6, parseState.ResultRange) 
                   )
# 58 "Parser.fsy"
                 : 'gentype_Stat));
# 623 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _6 = parseState.GetInput(6) :?> 'gentype_Stat in
            let _10 = parseState.GetInput(10) :?> 'gentype_Stat in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                                                               IfThenElse(_3, _6, _10, parseState.ResultRange) 
                   )
# 59 "Parser.fsy"
                 : 'gentype_Stat));
# 636 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _6 = parseState.GetInput(6) :?> 'gentype_Stat in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                                          While(_3, _6, parseState.ResultRange) 
                   )
# 60 "Parser.fsy"
                 : 'gentype_Stat));
# 648 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _6 = parseState.GetInput(6) :?> 'gentype_SwitchCases in
            let _7 = parseState.GetInput(7) :?> 'gentype_DefaultSwitchCase in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                                                                                    Switch(_3, _6, _7, parseState.ResultRange) 
                   )
# 61 "Parser.fsy"
                 : 'gentype_Stat));
# 661 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Stat in
            let _3 = parseState.GetInput(3) :?> 'gentype_Stat in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                  Sequence(_1, _3, parseState.ResultRange) 
                   )
# 62 "Parser.fsy"
                 : 'gentype_Stat));
# 673 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                          Return(_2, parseState.ResultRange) 
                   )
# 63 "Parser.fsy"
                 : 'gentype_Stat));
# 684 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                     ReturnVoid(parseState.ResultRange) 
                   )
# 64 "Parser.fsy"
                 : 'gentype_Stat));
# 694 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                      Int 
                   )
# 66 "Parser.fsy"
                 : 'gentype_Type));
# 704 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                            Ptr(_2) 
                   )
# 67 "Parser.fsy"
                 : 'gentype_Type));
# 715 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_VarDeclList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                                               Struct(_3) 
                   )
# 68 "Parser.fsy"
                 : 'gentype_Type));
# 726 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                      { varName = _2 ; ty = Int } 
                   )
# 70 "Parser.fsy"
                 : 'gentype_VarDecl));
# 737 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Type in
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                                                 { varName = _2 ; ty = Array(_1, _4) } 
                   )
# 71 "Parser.fsy"
                 : 'gentype_VarDecl));
# 750 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Type in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                                            { varName = _3 ; ty = Ptr(_1) } 
                   )
# 72 "Parser.fsy"
                 : 'gentype_VarDecl));
# 762 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_VarDecl in
            let _2 = parseState.GetInput(2) :?> 'gentype_VarDeclList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                         _1 :: _2 
                   )
# 74 "Parser.fsy"
                 : 'gentype_VarDeclList));
# 774 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_VarDecl in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                             [_1] 
                   )
# 75 "Parser.fsy"
                 : 'gentype_VarDeclList));
# 785 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_Type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                             { varName = _1 ; ty = _3 } 
                   )
# 78 "Parser.fsy"
                 : 'gentype_Param));
# 797 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Param in
            let _3 = parseState.GetInput(3) :?> 'gentype_ParamList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                                         _1 :: _3 
                   )
# 80 "Parser.fsy"
                 : 'gentype_ParamList));
# 809 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Param in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                         [_1] 
                   )
# 81 "Parser.fsy"
                 : 'gentype_ParamList));
# 820 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Type in
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_ParamList in
            let _7 = parseState.GetInput(7) :?> 'gentype_VarDeclList in
            let _8 = parseState.GetInput(8) :?> 'gentype_Stat in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                                                                                { name = _2 ; pars = _4 ; retTy = _1 ; localDecls = _7 ; body = _8 } 
                   )
# 83 "Parser.fsy"
                 : 'gentype_FunDecl));
# 835 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_FunDecl in
            let _2 = parseState.GetInput(2) :?> 'gentype_FunDeclList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                         _1 :: _2 
                   )
# 85 "Parser.fsy"
                 : 'gentype_FunDeclList));
# 847 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_FunDecl in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                             [_1] 
                   )
# 86 "Parser.fsy"
                 : 'gentype_FunDeclList));
# 858 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_VarDeclList in
            let _2 = parseState.GetInput(2) :?> 'gentype_FunDeclList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                                      { globals = _1 ; funDecls = _2 } 
                   )
# 88 "Parser.fsy"
                 : 'gentype_Prog));
|]
# 871 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 41;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let stat lexer lexbuf : Stat =
    engine lexer lexbuf 0 :?> _
let expr lexer lexbuf : Expr =
    engine lexer lexbuf 2 :?> _
