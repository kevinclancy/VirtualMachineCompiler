%{

open Syntax

%}

%start prog
%type <Prog> prog

%start expr
%type <Expr> expr

%start stat
%type <Stat> stat

// (most recent comment, identifier string)
%token <string> ID
%token <int> INT
%token LPAREN RPAREN LBRACK RBRACK LSQUAREBRACK RSQUAREBRACK TYPEINT
%token PLUS MINUS TIMES LEQ GEQ LT GT GETS SEMICOLON IF ELSE EQ
%token WHILE FOR SWITCH CASE DEFAULT COLON STRUCT BREAK COMMA PERIOD
%token NEW AMPERSAND RIGHTARROW DELETE RETURN VOID EOF FUN TYPEDEF

%right GETS

%left PERIOD
%left AMPERSAND
%left RIGHTARROW
%left TIMES
%left PLUS MINUS
%left EQ LEQ GEQ LT GT



%left SEMICOLON

%%

expr : Expr EOF { $1 }
Expr : Expr PLUS Expr  %prec PLUS  { Plus($1, $3, parseState.ResultRange) }
     | Expr MINUS Expr %prec MINUS { Minus($1, $3, parseState.ResultRange) }
     | Expr TIMES Expr %prec TIMES { Times($1, $3, parseState.ResultRange) }
     | Expr EQ Expr    %prec EQ    { Eq($1, $3, parseState.ResultRange) }
     | Expr LEQ Expr   %prec LEQ   { Leq($1, $3, parseState.ResultRange) }
     | Expr GEQ Expr   %prec GEQ   { Geq($1, $3, parseState.ResultRange) }
     | Expr LT Expr    %prec LT    { Lt($1, $3, parseState.ResultRange) }
     | Expr GT Expr    %prec GT    { Gt($1, $3, parseState.ResultRange) }
     | Expr GETS Expr  %prec GETS  { Assign($1, $3, parseState.ResultRange) }
     | Expr PERIOD ID  %prec PERIOD { FieldAccess($1, $3, parseState.ResultRange) }
     | AMPERSAND Expr { AddressOf($2, parseState.ResultRange) }
     | TIMES Expr { Deref($2, parseState.ResultRange) }
     | INT { IntLiteral($1, parseState.ResultRange) }
     | LPAREN Expr RPAREN { $2 }
     | ID { Var($1, parseState.ResultRange) }
     | ID LPAREN ArgList RPAREN { FunCall($1, $3, parseState.ResultRange) }
     | ID LPAREN RPAREN { FunCall($1, [], parseState.ResultRange) }
     | NEW Type { New($2, parseState.ResultRange) }

ArgList : Expr COMMA ArgList { $1 :: $3 }
        | Expr               { [$1] }

SwitchCase : CASE INT COLON StatList BREAK SEMICOLON { { scrutineeValue = $2 ; statement = $4 } }

DefaultSwitchCase : DEFAULT COLON StatList BREAK SEMICOLON { $3 }

SwitchCases : SwitchCase SwitchCases { $1 :: $2 }
            | SwitchCase { [$1] }

StatList : StatList Stat { Sequence($1, $2, parseState.ResultRange) }
         | Stat { $1 }

stat : Stat EOF { $1 }
Stat : Expr SEMICOLON { ExprStat($1, parseState.ResultRange) }
     | IF LPAREN Expr RPAREN LBRACK StatList RBRACK { IfThen($3, $6, parseState.ResultRange) }
     | IF LPAREN Expr RPAREN LBRACK StatList RBRACK ELSE LBRACK StatList RBRACK { IfThenElse($3, $6, $10, parseState.ResultRange) }
     | WHILE LPAREN Expr RPAREN LBRACK StatList RBRACK { While($3, $6, parseState.ResultRange) }
     | SWITCH LPAREN Expr RPAREN LBRACK SwitchCases DefaultSwitchCase RBRACK { Switch($3, $6, $7, parseState.ResultRange) }
    // | Stat SEMICOLON Stat { Sequence($1, $3, parseState.ResultRange) }
     | RETURN Expr SEMICOLON { Return($2, parseState.ResultRange) }
     | RETURN SEMICOLON { ReturnVoid(parseState.ResultRange) }

TypeDef : TYPEDEF STRUCT ID LBRACK VarDeclList RBRACK SEMICOLON { { name = $3 ; fields = $5 ; rng = parseState.ResultRange } }

TypeDefList : TypeDef TypeDefList { $1 :: $2 }
            | TypeDef { [$1] }

Type : TYPEINT { Int }
     | Type TIMES { Ptr($1, parseState.ResultRange) }
     | STRUCT ID { Struct($2, parseState.ResultRange) }

VarDecl : Type ID { { varName = $2 ; ty = $1 ; rng = parseState.ResultRange } }
        | Type ID LSQUAREBRACK INT RSQUAREBRACK { { varName = $2 ; ty = Array($1, $4, parseState.ResultRange) ; rng = parseState.ResultRange } }
  //      | Type TIMES ID { { varName = $3 ; ty = Ptr($1,) ; rng = parseState.ResultRange } }

VarDeclList : VarDecl SEMICOLON VarDeclList { $1 :: $3 }
            | VarDecl SEMICOLON { [$1] }

Param : Type ID { { varName = $2 ; ty = $1 ; rng = parseState.ResultRange } }

ParamList : Param COMMA ParamList { $1 :: $3 }
          | Param { [$1] }

OptParamList : LPAREN RPAREN { [] }
             | LPAREN ParamList RPAREN { $2 }

FunDecl : FUN Type ID OptParamList LBRACK VarDeclList StatList RBRACK { { name = $3 ; pars = $4 ; retTy = $2 ; localDecls = $6 ; body = $7 } }
        | FUN Type ID OptParamList LBRACK StatList RBRACK { { name = $3 ; pars = $4 ; retTy = $2 ; localDecls = [] ; body = $6 } }

FunDeclList : FunDecl FunDeclList { $1 :: $2 }
            | FunDecl { [$1] }

prog : Prog EOF { $1 }
Prog : TypeDefList VarDeclList FunDeclList { {typeDefs = $1 ; globals = $2 ; funDecls = $3} }
     | TypeDefList FunDeclList { {typeDefs = $1 ; globals = []; funDecls = $2} }
     | VarDeclList FunDeclList { {typeDefs = [] ; globals = $1 ; funDecls = $2} }
     | FunDeclList { {typeDefs = [] ; globals = [] ; funDecls = $1} }