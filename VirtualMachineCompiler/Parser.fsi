// Signature file for parser generated by fsyacc
module Parser
type token = 
  | MALLOC
  | AMPERSAND
  | RIGHTARROW
  | FREE
  | RETURN
  | VOID
  | EOF
  | FUN
  | TYPEDEF
  | WHILE
  | FOR
  | SWITCH
  | CASE
  | DEFAULT
  | COLON
  | STRUCT
  | BREAK
  | COMMA
  | PERIOD
  | PLUS
  | MINUS
  | TIMES
  | LEQ
  | GEQ
  | LT
  | GT
  | GETS
  | SEMICOLON
  | IF
  | ELSE
  | EQ
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LSQUAREBRACK
  | RSQUAREBRACK
  | TYPEINT
  | INT of (int)
  | ID of (string)
type tokenId = 
    | TOKEN_MALLOC
    | TOKEN_AMPERSAND
    | TOKEN_RIGHTARROW
    | TOKEN_FREE
    | TOKEN_RETURN
    | TOKEN_VOID
    | TOKEN_EOF
    | TOKEN_FUN
    | TOKEN_TYPEDEF
    | TOKEN_WHILE
    | TOKEN_FOR
    | TOKEN_SWITCH
    | TOKEN_CASE
    | TOKEN_DEFAULT
    | TOKEN_COLON
    | TOKEN_STRUCT
    | TOKEN_BREAK
    | TOKEN_COMMA
    | TOKEN_PERIOD
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_GETS
    | TOKEN_SEMICOLON
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_EQ
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_LSQUAREBRACK
    | TOKEN_RSQUAREBRACK
    | TOKEN_TYPEINT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstat
    | NONTERM__startexpr
    | NONTERM__startprog
    | NONTERM_expr
    | NONTERM_Expr
    | NONTERM_ArgList
    | NONTERM_SwitchCase
    | NONTERM_DefaultSwitchCase
    | NONTERM_SwitchCases
    | NONTERM_StatList
    | NONTERM_stat
    | NONTERM_Stat
    | NONTERM_TypeDef
    | NONTERM_TypeDefList
    | NONTERM_Type
    | NONTERM_VarDecl
    | NONTERM_VarDeclList
    | NONTERM_Param
    | NONTERM_ParamList
    | NONTERM_OptParamList
    | NONTERM_FunDecl
    | NONTERM_FunDeclList
    | NONTERM_prog
    | NONTERM_Prog
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val stat : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Stat) 
val expr : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Expr) 
val prog : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Prog) 
